<?php
// test_csrf_real_attack.php
require_once 'csrf_helper.php';

echo "<h2>üö® Test CSRF Attack Real</h2>";

// Test 1: T·∫°o file hacker.php c√≥ CSRF protection
echo "<h3>1. T·∫°o hacker.php c√≥ CSRF protection</h3>";
$protectedHackerCode = '<?php
require_once "csrf_helper.php";

// Ki·ªÉm tra CSRF token tr∆∞·ªõc khi x·ª≠ l√Ω
if (!$csrf->validateGetToken()) {
    http_response_code(403);
    die("üö® CSRF Attack Blocked! Token kh√¥ng h·ª£p l·ªá.");
}

// Ch·ªâ x·ª≠ l√Ω n·∫øu c√≥ CSRF token h·ª£p l·ªá
if (isset($_GET["cookie"])) {
    file_put_contents("cookie.txt", $_GET["cookie"]);
    echo "‚úÖ Cookie ƒë√£ ƒë∆∞·ª£c l∆∞u (c√≥ CSRF protection)";
} else {
    echo "‚ùå Thi·∫øu parameter cookie";
}
?>';

echo "<p>Code hacker.php c√≥ CSRF protection:</p>";
echo "<pre style='background: #f5f5f5; padding: 10px;'>" . htmlspecialchars($protectedHackerCode) . "</pre>";

// Test 2: Test CSRF attack simulation
echo "<h3>2. Test CSRF Attack Simulation</h3>";

// T·∫°o CSRF token h·ª£p l·ªá
$validToken = $csrf->generateToken();
echo "<p>CSRF Token h·ª£p l·ªá: <code>" . substr($validToken, 0, 20) . "...</code></p>";

// Test 3: Test c√°c tr∆∞·ªùng h·ª£p
echo "<h3>3. Test Cases</h3>";

echo "<h4>Case 1: Truy c·∫≠p tr·ª±c ti·∫øp (kh√¥ng c√≥ CSRF token)</h4>";
echo "<p>Link: <a href='hacker.php?cookie=direct_attack' target='_blank'>hacker.php?cookie=direct_attack</a></p>";
echo "<p><strong>K·∫øt qu·∫£ mong ƒë·ª£i:</strong> CSRF Attack Blocked! ‚ùå</p>";

echo "<h4>Case 2: Truy c·∫≠p v·ªõi CSRF token h·ª£p l·ªá</h4>";
echo "<p>Link: <a href='hacker.php?cookie=csrf_attack&csrf_token=" . $validToken . "' target='_blank'>hacker.php?cookie=csrf_attack&csrf_token=...</a></p>";
echo "<p><strong>K·∫øt qu·∫£ mong ƒë·ª£i:</strong> Cookie ƒë√£ ƒë∆∞·ª£c l∆∞u ‚úÖ</p>";

echo "<h4>Case 3: Truy c·∫≠p v·ªõi CSRF token kh√¥ng h·ª£p l·ªá</h4>";
echo "<p>Link: <a href='hacker.php?cookie=fake_attack&csrf_token=fake_token' target='_blank'>hacker.php?cookie=fake_attack&csrf_token=fake_token</a></p>";
echo "<p><strong>K·∫øt qu·∫£ mong ƒë·ª£i:</strong> CSRF Attack Blocked! ‚ùå</p>";

// Test 4: Test v·ªõi form
echo "<h3>4. Test v·ªõi Form</h3>";
echo "<form method='post' action='hacker.php' style='margin: 20px 0;'>";
echo $csrf->getHiddenInput();
echo "<input type='hidden' name='cookie' value='form_attack'>";
echo "<button type='submit' class='btn btn-primary'>Test Form CSRF Attack</button>";
echo "</form>";

// Test 5: Test v·ªõi AJAX
echo "<h3>5. Test v·ªõi AJAX</h3>";
echo "<button onclick='testAjaxAttack()' class='btn btn-success'>Test AJAX CSRF Attack</button>";

echo "<script>
function testAjaxAttack() {
    const csrfToken = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content');
    
    // Test 1: AJAX v·ªõi CSRF token h·ª£p l·ªá
    fetch('hacker.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-CSRF-Token': csrfToken
        },
        body: 'cookie=ajax_attack&csrf_token=' + csrfToken
    })
    .then(response => response.text())
    .then(data => {
        alert('AJAX v·ªõi CSRF token: ' + data);
    });
    
    // Test 2: AJAX kh√¥ng c√≥ CSRF token
    fetch('hacker.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: 'cookie=ajax_no_csrf'
    })
    .then(response => response.text())
    .then(data => {
        alert('AJAX kh√¥ng c√≥ CSRF token: ' + data);
    });
}
</script>";

// Test 6: Ki·ªÉm tra k·∫øt qu·∫£
echo "<h3>6. Ki·ªÉm tra k·∫øt qu·∫£</h3>";
if (file_exists('cookie.txt')) {
    $cookieContent = file_get_contents('cookie.txt');
    echo "<p>‚úÖ File cookie.txt t·ªìn t·∫°i</p>";
    echo "<p>N·ªôi dung: <code>" . htmlspecialchars($cookieContent) . "</code></p>";
    
    // Ph√¢n t√≠ch k·∫øt qu·∫£
    if ($cookieContent === 'direct_attack') {
        echo "<p style='color: red;'>‚ùå CSRF Protection: KH√îNG HO·∫†T ƒê·ªòNG</p>";
        echo "<p>Hacker c√≥ th·ªÉ truy c·∫≠p tr·ª±c ti·∫øp m√† kh√¥ng c·∫ßn CSRF token!</p>";
    } elseif ($cookieContent === 'csrf_attack') {
        echo "<p style='color: green;'>‚úÖ CSRF Protection: HO·∫†T ƒê·ªòNG</p>";
        echo "<p>Ch·ªâ cho ph√©p truy c·∫≠p v·ªõi CSRF token h·ª£p l·ªá!</p>";
    } elseif ($cookieContent === 'form_attack') {
        echo "<p style='color: green;'>‚úÖ Form CSRF Protection: HO·∫†T ƒê·ªòNG</p>";
    } elseif ($cookieContent === 'ajax_attack') {
        echo "<p style='color: green;'>‚úÖ AJAX CSRF Protection: HO·∫†T ƒê·ªòNG</p>";
    } else {
        echo "<p style='color: orange;'>‚ö†Ô∏è K·∫øt qu·∫£ kh√¥ng r√µ r√†ng</p>";
    }
} else {
    echo "<p>‚ùå File cookie.txt kh√¥ng t·ªìn t·∫°i</p>";
    echo "<p>CSRF Protection c√≥ th·ªÉ ƒëang ho·∫°t ƒë·ªông!</p>";
}

// Test 7: Test v·ªõi database query
echo "<h3>7. Test v·ªõi Database Query</h3>";
echo "<p>T·∫°o file test database CSRF:</p>";

$dbCsrfTestCode = '<?php
require_once "csrf_helper.php";
require_once "models/UserModel.php";

// Ki·ªÉm tra CSRF token tr∆∞·ªõc khi query database
if (!$csrf->validateGetToken()) {
    http_response_code(403);
    die("üö® CSRF Attack Blocked! Kh√¥ng ƒë∆∞·ª£c ph√©p query database.");
}

// Ch·ªâ query n·∫øu c√≥ CSRF token h·ª£p l·ªá
if (isset($_GET["action"])) {
    try {
        $userModel = new UserModel();
        $users = $userModel->getUsers([]);
        echo "‚úÖ Database query th√†nh c√¥ng (c√≥ CSRF protection)";
        echo "<p>S·ªë users: " . count($users) . "</p>";
    } catch (Exception $e) {
        echo "‚ùå Database query failed: " . $e->getMessage();
    }
} else {
    echo "‚ùå Thi·∫øu parameter action";
}
?>';

echo "<pre style='background: #f5f5f5; padding: 10px;'>" . htmlspecialchars($dbCsrfTestCode) . "</pre>";

echo "<hr>";
echo "<h3>üìä T√≥m t·∫Øt Test</h3>";
echo "<p><strong>CSRF Protection Status:</strong> " . (file_exists('cookie.txt') ? 'C·∫ßn ki·ªÉm tra' : 'C√≥ th·ªÉ ƒëang ho·∫°t ƒë·ªông') . "</p>";
echo "<p><strong>Recommendation:</strong></p>";
echo "<ul>";
echo "<li>Lu√¥n ki·ªÉm tra CSRF token tr∆∞·ªõc khi x·ª≠ l√Ω request</li>";
echo "<li>Block t·∫•t c·∫£ request kh√¥ng c√≥ CSRF token h·ª£p l·ªá</li>";
echo "<li>Test v·ªõi nhi·ªÅu ph∆∞∆°ng th·ª©c: GET, POST, AJAX</li>";
echo "<li>Ki·ªÉm tra c·∫£ database queries v√† file operations</li>";
echo "</ul>";
?>